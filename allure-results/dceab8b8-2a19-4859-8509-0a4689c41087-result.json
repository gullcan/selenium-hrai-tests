{"name": "test_logout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9f0ebc1cccca6859e65780eb92b01d9b\")>\n\n    @pytest.mark.auth\n    def test_logout(driver):\n        # login first\n        open_login(driver)\n        driver.find_element(By.ID, \"Username\").send_keys(USERNAME)\n        driver.find_element(By.ID, \"passwordField\").send_keys(PASSWORD)\n        driver.find_element(By.CSS_SELECTOR, \"button[type='submit']\").click()\n        WebDriverWait(driver, 8).until(lambda d: (\"Login/Index\" not in d.current_url))\n        # attempt logout by submitting logoutForm via JS (saÄŸlam bir fallback)\n        driver.execute_script(\"\"\"\n            const f = document.querySelector('form#logoutForm');\n            if (f) { f.submit(); return true; } else { return false; }\n        \"\"\")\n        # wait for redirect to login\n>       WebDriverWait(driver, 8).until(lambda d: \"Login/Index\" in d.current_url or \"login\" in d.title.lower())\n\ntests/test_login_page.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9f0ebc1cccca6859e65780eb92b01d9b\")>\nmethod = <function test_logout.<locals>.<lambda> at 0x10535a2a0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException"}, "attachments": [{"name": "Screenshot", "source": "4bc61fac-d7ff-4cf9-9c16-f5da45236319-attachment.png", "type": "image/png"}], "start": 1758456312552, "stop": 1758456322784, "uuid": "189d009f-53d9-4c7d-86b9-36036b2f8ba9", "historyId": "38e5a0b5d77b00ca4b168c6408aa4d27", "testCaseId": "38e5a0b5d77b00ca4b168c6408aa4d27", "fullName": "tests.test_login_page#test_logout", "labels": [{"name": "tag", "value": "auth"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "Gulcan-MacBook-Air.local"}, {"name": "thread", "value": "12829-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_page"}], "titlePath": ["tests", "test_login_page.py"]}